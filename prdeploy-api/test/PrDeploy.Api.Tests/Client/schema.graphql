schema {
  query: DeployQuery
  mutation: DeployMutation
}

type DeployQuery {
  deployQueues(input: RepoQueryInput!): [DeployQueue!]!
  deploySettingsCompare(input: RepoQueryInput!): DeploySettingsCompare!
  repoSettings(input: RepoQueryInput!): DeploySettings!
  ownerSettings(input: OwnerQueryInput!): DeploySettings!
  deployEnvironments(input: RepoQueryInput!): [DeployEnvironment!]!
  environments(input: RepoQueryInput!): [Environment!]!
  deployStateComparison(input: DeployStateComparisonInput!): DeployStateComparison!
  openPullRequests(input: OpenPullRequestInput!): [PullRequest!]!
  enabledOwnerRepos: [OwnerRepos!]!
  repositoryServices(input: RepoQueryInput!): [String!]!
}

type DeployMutation {
  deployEnvironmentFree(input: PullDeployInput!): StatusResponse!
  deployEnvironmentDeploy(input: EnvironmentDeployInput!): StatusResponse!
  deployEnvironmentRollback(input: RollbackInput!): StatusResponse!
  deployQueueUpdate(input: DeployQueueUpdateInput!): DeployQueue!
  repoSettingsSet(input: SetRepoSettingsInput!): StatusResponse!
  ownerSettingsSet(input: SetOwnerSettingsInput!): StatusResponse!
  ownerRepoAddEnabled(input: RepositoryInput!): StatusResponse!
  ownerRepoRemoveEnabled(input: RepositoryInput!): StatusResponse!
  pullRequestAddServices(input: PullRequestAddServicesInput!): StatusResponse!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

input OpenPullRequestInput {
  search: String
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

"Pull request to deploy and merge code."
type PullRequest {
  "Pull request number."
  number: Int!
  "Pull request title."
  title: String
  "URL for displaying the pull request HTML."
  url: String
  "Pull request body as markdown."
  body: String
  "The date and time the pull request deployment was last updated."
  updatedAt: DateTime
  "Login for user the pull request was created by."
  user: DeployUser
}

"Input for retrieving the deploy state comparison."
input DeployStateComparisonInput {
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
  "Environment to compare from."
  sourceEnvironment: ID
  "Environment to compare to."
  targetEnvironment: ID
}

type DeployStateComparison {
  "Source environment to compare."
  sourceEnvironment: ID
  "Source environment current pull request number."
  sourcePullNumber: Int!
  "Target environment to compare to, Prod unless source is Prod, then Stable."
  targetEnvironment: ID
  "Target environment current pull request number."
  targetPullNumber: Int!
  "List of service comparisons."
  serviceComparisons: [ServiceComparison!]!
}

"Deployment environment such as Dev, Stage, and Prod."
type Environment {
  "Readable name of the environment."
  name: ID
  "Full URL of the environment."
  url: String
}

"Environment and current pull request information."
type DeployEnvironment {
  "Environment that pull request is deployed to."
  name: ID
  "The full URL of the environment."
  url: String
  "The color used for the icon representing the environment."
  color: String
  "Current pull request in environment."
  pullRequest: PullRequest
  "A value indicating if the current environment is reserved for deploy."
  locked: Boolean!
}

"Input for a general owner query."
input OwnerQueryInput {
  "Repository owner or organization."
  owner: ID
}

type DeploySettings {
  deployWorkflow: String
  environments: [EnvironmentSettings!]
  services: [ServiceSettings!]
  defaultEnvironment: String
  releaseEnvironment: String
  jira: JiraSettings
  builds: BuildsSettings
  slack: SlackSettings
  prdeployPortalUrl: String
  badge: BadgeSettings
}

type DeploySettingsCompare {
  deployWorkflow: OwnerRepoValueOfString!
  environments: OwnerRepoValueOfListOfEnvironmentSettings!
  services: OwnerRepoValueOfListOfServiceSettings!
  defaultEnvironment: OwnerRepoValueOfString!
  releaseEnvironment: OwnerRepoValueOfString!
  jira: JiraSettingsCompare!
  builds: BuildsSettingsCompare!
  slack: SlackSettingsCompare!
  prdeployPortalUrl: OwnerRepoValueOfString!
  badge: BadgeSettingsCompare!
}

"Input for a general owner and repo query."
input RepoQueryInput {
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

"Queue for a specific environment of pull requests waiting to be deployed."
type DeployQueue {
  "Environment to list the queue for."
  environment: ID
  "Ordered list of pull requests waiting in queue."
  pullRequests: [PullRequest!]!
}

"Set of owner and associated repos."
type OwnerRepos {
  "Owner or organization of a set of repo."
  owner: String!
  "List of repository names for owner."
  repos: [String!]!
}

"Simple status response from a mutation."
type StatusResponse {
  "True if the mutation was successful; otherwise false."
  success: Boolean!
}

input PullDeployInput {
  environment: ID!
  pullNumber: Int!
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

input EnvironmentDeployInput {
  force: Boolean
  retain: Boolean
  environment: ID!
  pullNumber: Int!
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

input RollbackInput {
  count: Int!
  environment: ID!
  pullNumber: Int!
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

input DeployQueueUpdateInput {
  environment: ID!
  pullNumbers: [Int!]
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

"Input for updating repo settings."
input SetRepoSettingsInput {
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
  "Full settings for owner and repository."
  settings: DeploySettingsInput
}

"Input for updating repo settings."
input SetOwnerSettingsInput {
  "Repository owner or organization."
  owner: ID
  "Full settings for owner that defaults repo settings."
  settings: DeploySettingsInput
}

"Owner and repo name of a repository."
input RepositoryInput {
  "Owner or organization of a repo."
  owner: String!
  "Name of the repository."
  repo: String!
}

input PullRequestAddServicesInput {
  pullNumber: Int!
  services: [String!]!
  "Repository owner or organization."
  owner: ID
  "Repository being accessed within the owner."
  repo: ID
}

input DeploySettingsInput {
  deployWorkflow: String
  environments: [EnvironmentSettingsInput!]
  services: [ServiceSettingsInput!]
  defaultEnvironment: String
  releaseEnvironment: String
  jira: JiraSettingsInput
  builds: BuildsSettingsInput
  slack: SlackSettingsInput
  prdeployPortalUrl: String
  badge: BadgeSettingsInput
}

type BadgeSettingsCompare {
  statusColors: BadgeStatusColorsSettingsCompare!
}

type SlackSettingsCompare {
  token: OwnerRepoValueOfString!
  emailDomain: OwnerRepoValueOfString!
  emailAliases: OwnerRepoDictionary!
  webhooks: SlackWebHooksSettingsCompare!
  notificationsEnabled: OwnerRepoValueOfNullableOfBoolean!
}

type BuildsSettingsCompare {
  checkPattern: OwnerRepoValueOfString!
  workflowPattern: OwnerRepoValueOfString!
}

type JiraSettingsCompare {
  addIssuesEnabled: OwnerRepoValueOfNullableOfBoolean!
  host: OwnerRepoValueOfString!
  username: OwnerRepoValueOfString!
  password: OwnerRepoValueOfString!
}

type OwnerRepoValueOfListOfServiceSettings {
  owner: [ServiceSettings]
  repo: [ServiceSettings]
}

type OwnerRepoValueOfListOfEnvironmentSettings {
  owner: [EnvironmentSettings]
  repo: [EnvironmentSettings]
}

type OwnerRepoValueOfString {
  owner: String
  repo: String
}

type BadgeSettings {
  statusColors: BadgeStatusColorsSettings
}

type SlackSettings {
  token: String
  emailDomain: String
  emailAliases: Any
  webhooks: SlackWebHooksSettings
  notificationsEnabled: Boolean
}

type BuildsSettings {
  checkPattern: String
  workflowPattern: String
}

type JiraSettings {
  addIssuesEnabled: Boolean
  host: String
  username: String
  password: String
}

type ServiceSettings {
  name: String!
  path: String
}

type EnvironmentSettings {
  name: String!
  queue: String!
  url: String
  requireApproval: Boolean!
  requireBranchUpToDate: Boolean!
  automationTest: AutomationTestSettings
  excludeFromRollback: [String!]
}

"Comparison of services between a source and target environment."
type ServiceComparison {
  "Name of the service deployed."
  name: ID
  "Workflow run ID of the source service."
  sourceRunId: Long!
  "Version of the source service."
  sourceVersion: String!
  "Workflow run ID of the target service."
  targetRunId: Long!
  "Version of the target service."
  targetVersion: String!
}

type DeployUser {
  name: String
  username: String
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar Any

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

type AutomationTestSettings {
  enabled: Boolean
  workflow: String
  inputs: Any
}

type SlackWebHooksSettings {
  deployUrl: String
  releaseUrl: String
}

type BadgeStatusColorsSettings {
  error: String
  warn: String
  success: String
  info: String
}

type OwnerRepoValueOfNullableOfBoolean {
  owner: Boolean
  repo: Boolean
}

type SlackWebHooksSettingsCompare {
  deployUrl: OwnerRepoValueOfString!
  releaseUrl: OwnerRepoValueOfString!
}

type OwnerRepoDictionary {
  owner: Any
  repo: Any
}

type BadgeStatusColorsSettingsCompare {
  error: OwnerRepoValueOfString!
  warn: OwnerRepoValueOfString!
  success: OwnerRepoValueOfString!
  info: OwnerRepoValueOfString!
}

input BadgeSettingsInput {
  statusColors: BadgeStatusColorsSettingsInput
}

input SlackSettingsInput {
  token: String
  emailDomain: String
  emailAliases: Any
  webhooks: SlackWebHooksSettingsInput
  notificationsEnabled: Boolean
}

input BuildsSettingsInput {
  checkPattern: String
  workflowPattern: String
}

input JiraSettingsInput {
  addIssuesEnabled: Boolean
  host: String
  username: String
  password: String
}

input ServiceSettingsInput {
  name: String!
  path: String
}

input EnvironmentSettingsInput {
  name: String!
  queue: String!
  url: String
  requireApproval: Boolean!
  requireBranchUpToDate: Boolean!
  automationTest: AutomationTestSettingsInput
  excludeFromRollback: [String!]
}

input AutomationTestSettingsInput {
  enabled: Boolean
  workflow: String
  inputs: Any
}

input SlackWebHooksSettingsInput {
  deployUrl: String
  releaseUrl: String
}

input BadgeStatusColorsSettingsInput {
  error: String
  warn: String
  success: String
  info: String
}